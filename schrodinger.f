c   AUTHOR:       Manuel Almagro Rivas (malmriv@correo.ugr.es)
c   DESCRIPTION.  Simulates a 1D wave in a square potential by numerically
c                 solving the 1D-time dependent Schr√∂dinger equation.
c   INPUT.        Reads a .txt file generated by an R wrap.
c   OUTPUT.       A plain text file with a column matrix of length N*iterations.

      program schrodinger
      implicit none
c     Declaracion of variables.
      integer cycles, i, j, N, iterations
      real*8 lambda, h, s, s_n, k_0
      real*8, dimension(:), allocatable :: V
      complex*8, dimension(:), allocatable :: chi, alpha, beta, wavefunc

c     Parameters are read from a .txt file in the same folder
      open(40,file="./config.txt",status="old")
      read(40,*) N,lambda,s,h,cycles,iterations
      close(40)

c     The remaining variables are fixed by our initial choice of parameters
      cycles = N/cycles
      k_0 = 2.d0*3.14159265358979*cycles/float(N)
      s_n = 1.d0/(4*k_0**2.d0)

      write(*,*) "Parameters set."

c     Allocate memory accordingly to N:
      allocate(V(0:N), chi(0:N), alpha(0:N), beta(0:N))
      allocate(wavefunc(0:N))
      write(*,*) "Memory allocated."

c     Define the (square) potential
      V = 0
      do j=nint(0.4*N),nint(0.6*N),1
        V(j) = lambda*k_0**2.d0
      end do

c     Define initial state of the wave: gaussian.
      wavefunc = 0
      do j = 1,N-1
        wavefunc(j) = exp(complex(0,k_0*j))*exp(-8.d0*(4.d0*j-
     & N)**2.d0/N**2.d0)
      end do
      write(*,*) "Initial state of the system defined."

c     Compute alpha coefficients
      alpha(N-1) = 0
      do j = (N-2),1,-1
        alpha(j) = -1.d0/(-2.d0 + complex(0,2)/s_n - V(j+1)
     &  + alpha(j+1))
      end do
      write(*,*) "Alpha coefficients computed."

c     Now, iterate for as many times as desired. Beta coeffs. need to be
c     computed for every step.
      open(70,file="./results/wavefunction.txt")
      do i = 1,iterations

c     Compute beta coefficients
      beta(N-1) = 0
      do j = (N-2),0,-1
        beta(j) = -alpha(j)*(complex(0,4.d0/s_n)*wavefunc(j+1)-
     &  beta(j+1))
      end do

c     Compute chi operator and wave function values
      chi(0) = 0
      chi(N) = 0

      do j = 1,N
        chi(j) = alpha(j-1)*chi(j-1) + beta(j-1)
        wavefunc(j) = chi(j) - wavefunc(j)
        write(70,*) real(wavefunc(j))**2.d0+aimag(wavefunc(j))**2.d0
      end do
      end do
      close(70)
      write(*,*) "Wavefunction computed."

      end program schrodinger
